{"version":3,"sources":["components/Input.js","components/SizeField.js","utils.js","components/Preview.js","components/TextField.js","components/Select.js","components/FontEditor.js","components/ColorPicker.js","components/Header.js","components/DownloadButton.js","App.js","serviceWorker.js","index.js"],"names":["DefaultInput","styled","input","props","big","Input","StyledFormControl","div","BannerSizeField","sizeValue","onChange","width","height","name","placeholder","value","fontFamilyList","fontSizeList","Preview","backgroundColor","text","fontTheme","href","updatePreview","canvasRef","useRef","useEffect","canvas","current","getContext","ctx","fillStyle","fillRect","family","size","color","theme","x","y","font","textAlign","textBaseline","fillText","setCanvasText","url","toDataURL","ref","StyledInput","TextField","onFocus","onBlur","DefaultSelect","select","Select","StyledSelector","FontEditor","map","index","split","key","StyledSvg","span","StyledColorPickerWrap","StyledColorPicker","ColorSwatch","StyledColorPopover","StyledColorCover","ColorPicker","onOpen","onClose","icon","displayColorPicker","colorPicker","onClick","StyledHeader","header","Header","StyledButton","a","DownloadButton","download","faDownload","StyledBannerSizeField","StyledBannerPreview","StyledBannerTextField","StyledFontEditor","StyledColorEditor","StyledBannerDownLoad","App","useState","setSizeValue","setFontTheme","setText","bgColor","setBgColor","textColor","setTextColor","setHref","bgColorHex","Math","floor","random","toString","textColorHex","parseInt","substr","style","SizeField","target","prev","faFillDrip","hex","disableAlpha","faFont","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6f1a2391.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst DefaultInput = styled.input`\r\n  display: inline-block;\r\n  padding: ${props => props.big ? '10px 20px' : '10px 12px'};\r\n  height: ${props => props.big ? '55px' : '40px'};\r\n  border: none;\r\n  background-color: #fff;\r\n  font-size: ${props => props.big ? '18px' : '14px'};\r\n  font-family: 'Arial', sans-serif;\r\n`\r\n\r\nconst Input = props => <DefaultInput {...props} />\r\n\r\nexport default Input","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Input from './Input'\r\n\r\nconst StyledFormControl = styled.div`\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n  span {\r\n    display: inline-block;\r\n    padding: 11px 15px;\r\n    height: 40px;\r\n    font-size: 15px;\r\n    color: #333;\r\n    vertical-align: middle;\r\n    background-color: #eee;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n  input {\r\n    vertical-align: middle;\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n`\r\n\r\nconst BannerSizeField = ({sizeValue, onChange}) => {\r\n  const {width, height} = sizeValue\r\n  return <>\r\n    <StyledFormControl>\r\n      <span>width</span>\r\n      <Input name=\"width\" placeholder=\"width\" value={width} onChange={onChange} />\r\n    </StyledFormControl>\r\n    <StyledFormControl>\r\n      <span>height</span>\r\n      <Input name=\"height\" placeholder=\"height\" value={height} onChange={onChange} />\r\n    </StyledFormControl>\r\n  </>\r\n}\r\n\r\nexport default BannerSizeField","export const setCanvasText = (canvas, text, theme) => {\r\n  const ctx = canvas.getContext('2d')\r\n  const x = canvas.width/2\r\n  const y = canvas.height/2\r\n  const {family, size, color} = theme\r\n  ctx.font = `${size}px ${family}`\r\n  ctx.textAlign = 'center'\r\n  ctx.textBaseline = 'middle'\r\n  ctx.fillStyle = color\r\n  ctx.fillText(text, x, y)\r\n}\r\n\r\nexport const fontFamilyList = [\r\n  'Arial, sans-serif',\r\n  'Courier, serif',\r\n  'Times New Roman, serif',\r\n  'Impact, sans-serif',\r\n  '궁서, serif',\r\n  '돋움, sans-serif',\r\n  '바탕, sans-serif'\r\n]\r\nexport const fontSizeList = [20, 30, 40, 50, 60, 70, 80, 90, 100, 120]\r\n\r\n// 16777215 === ffffff\r\nexport const randomHexColor = () => `${Math.floor(Math.random() * 16777215).toString(16)}`\r\n\r\nexport const getContrast = (color) => {\r\n  const r = parseInt(color.substr(0, 2), 16)\r\n  const g = parseInt(color.substr(2, 2), 16)\r\n  const b = parseInt(color.substr(4, 2), 16)\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000\r\n  return yiq >= 220 ? '#000000' : '#ffffff'\r\n}","import React, { useRef, useEffect } from 'react'\r\nimport { setCanvasText } from '../utils'\r\n\r\nconst Preview = ({width, height, backgroundColor, text, fontTheme, href, updatePreview}) => {\r\n  const canvasRef = useRef(null)\r\n  useEffect(() => {\r\n    const canvas = canvasRef.current\r\n    if(canvas.getContext){\r\n      const ctx = canvas.getContext('2d')\r\n      ctx.fillStyle = backgroundColor\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n      const {family, size, color} = fontTheme\r\n      setCanvasText(canvas, text, {family: family, size: size, color: color})\r\n\r\n      const url = canvas.toDataURL();\r\n      href !== url && updatePreview(url)\r\n    }\r\n  }, [width, height, backgroundColor, text, fontTheme, href, updatePreview])\r\n\r\n  return <canvas ref={canvasRef} width={width} height={height}></canvas>\r\n}\r\n\r\nexport default Preview","import React from 'react'\r\nimport Input from './Input'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledInput = styled(Input)`\r\n  width: 100%;\r\n  color: #eee;\r\n  background-color: rgba(0, 0, 0, 0.35);\r\n  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.55);\r\n  outline: none;\r\n  &::placeholder {\r\n    color: #eee;\r\n  }\r\n`\r\n\r\nconst TextField = ({onChange, onFocus, onBlur, placeholder}) => {\r\n  return <StyledInput big name=\"text\" onChange={onChange} onFocus={onFocus} onBlur={onBlur} placeholder={placeholder} />\r\n}\r\n\r\nexport default TextField","import React from 'react' \r\nimport styled from 'styled-components'\r\n\r\nconst DefaultSelect = styled.select`\r\n  display: inline-block;\r\n  padding: ${props => props.big ? '10px 23px' : '8px 15px'};\r\n  border: none;\r\n  background-color: #fff;\r\n  font-size: ${props => props.big ? '18px' : '14px'};\r\n  font-family: 'Arial', sans-serif;\r\n  border-radius: 3px;\r\n  color: #555;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n`\r\n\r\nconst Select = (props) => <DefaultSelect {...props} />\r\n\r\nexport default Select","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Select from './Select';\r\nimport { fontFamilyList, fontSizeList } from '../utils';\r\n\r\nconst StyledSelector = styled.div`\r\n  span {\r\n    display: block;\r\n    margin-bottom: 8px;\r\n    text-align: left;\r\n    color: #f8f8f8;\r\n  }\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n`\r\n\r\nconst FontEditor = ({onChange}) => {\r\n  return <>\r\n    <StyledSelector>\r\n      <span>Font Family</span>\r\n      <Select name=\"family\" onChange={onChange}>\r\n        {\r\n          fontFamilyList.map((family, index) => {\r\n            const name = family.split(',')\r\n            return (<option value={family} key={`family-${index}`}>{family}</option>)\r\n          })\r\n        }\r\n      </Select>\r\n    </StyledSelector>\r\n    <StyledSelector>\r\n      <span>Font Size</span>\r\n      <Select name=\"size\" onChange={onChange}>\r\n        {\r\n          fontSizeList.map((size, index) => {\r\n            return (<option value={size} key={`size-${index}`}>{size}px</option>)\r\n          })\r\n        }\r\n      </Select>\r\n    </StyledSelector>\r\n  </>\r\n}\r\n\r\nexport default FontEditor","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\n\r\nconst StyledSvg = styled.span`\r\n  display: block;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: transparent;\r\n  color: #000000;\r\n`\r\nconst StyledColorPickerWrap= styled.div`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n  position: relative;\r\n`\r\nconst StyledColorPicker = styled.div`\r\n  padding: 3px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  box-shadow: 5px 5px 10px rgba(0,0,0,0.35);\r\n  cursor: pointer;\r\n`\r\nconst ColorSwatch = styled.div`\r\n  width: 45px;\r\n  height: 45px;\r\n  border-radius: 3px;\r\n  background-color: ${props => props.color};\r\n`\r\nconst StyledColorPopover = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 70px;\r\n  z-index: 2;\r\n  margin-bottom: 50px;\r\n`\r\nconst StyledColorCover = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n`\r\n\r\nconst ColorPicker = ({onOpen, onClose, color, icon, displayColorPicker, colorPicker }) => {\r\n  return <StyledColorPickerWrap> \r\n    <StyledColorPicker onClick={onOpen}>\r\n      <ColorSwatch color={color}></ColorSwatch>\r\n      <StyledSvg><FontAwesomeIcon icon={icon} size=\"lg\" /></StyledSvg>\r\n    </StyledColorPicker>\r\n    {displayColorPicker ? <>\r\n      <StyledColorCover onClick={onClose}></StyledColorCover>\r\n      <StyledColorPopover>\r\n        {colorPicker}\r\n      </StyledColorPopover>\r\n    </> : null}\r\n  </StyledColorPickerWrap>\r\n}\r\n\r\nexport default ColorPicker\r\n\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledHeader = styled.header`\r\n  width: 100%;\r\n  padding: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(0,0,0,0.45);\r\n  color: #f8f8f8;\r\n  h1 {\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n  }\r\n  span {\r\n    margin-left: auto;\r\n  }\r\n`\r\n\r\nconst Header = () => {\r\n  return  <StyledHeader>\r\n    <h1>Banner</h1>\r\n    <span>By JIHYE</span>\r\n  </StyledHeader>\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledButton = styled.a`\r\n  display: inline-block;\r\n  width: 150px;\r\n  height: 45px;\r\n  line-height: 45px;\r\n  text-align: center;\r\n  border-radius: 3px;\r\n  background-color: rgb(32, 201, 151);\r\n  font-size: 16px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n`\r\n\r\nconst DownloadButton = ({href}) => {\r\n  return <StyledButton href={href} download=\"banner-image.png\">\r\n    <FontAwesomeIcon icon={faDownload} />  Download\r\n  </StyledButton>\r\n}\r\n\r\nexport default DownloadButton","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport SizeField from './components/SizeField'\r\nimport Preview from './components/Preview';\r\nimport TextField from './components/TextField';\r\nimport FontEditor from './components/FontEditor';\r\nimport ColorPicker from './components/ColorPicker';\r\nimport { faFillDrip, faFont } from '@fortawesome/free-solid-svg-icons'\r\nimport { ChromePicker } from 'react-color'\r\nimport { randomHexColor, getContrast } from './utils';\r\nimport Header from './components/Header';\r\nimport DownloadButton from './components/DownloadButton';\r\n\r\nconst StyledBannerSizeField = styled.div`\r\n  text-align: center;\r\n`\r\nconst StyledBannerPreview = styled.div`\r\n  margin: 20px auto 30px;\r\n`\r\nconst StyledBannerTextField = styled.div`\r\n  width: 500px;\r\n  margin: 0 auto;\r\n`\r\nconst StyledFontEditor = styled.div`\r\n  margin: 40px 0;\r\n  text-align: center;\r\n  select {\r\n    width: 210px;\r\n  }\r\n`\r\nconst StyledColorEditor = styled.div`\r\n  position: relative;\r\n  display: inline-block;\r\n  > div {\r\n    margin: 0 20px;\r\n  }\r\n`\r\nconst StyledBannerDownLoad = styled.div`\r\n  margin-top: 30px;\r\n`\r\n\r\nconst App = () => {\r\n  const [sizeValue, setSizeValue] = useState({width: '700', height: '350'})\r\n  const [fontTheme, setFontTheme] = useState({family: 'Arial, sans-serif', size: '20', color: '#000'})\r\n  const [text, setText] = useState('Sample Banner')\r\n  const [bgColor, setBgColor] = useState({displayColorPicker: false, color: '#000000'})\r\n  const [textColor, setTextColor] = useState({displayColorPicker: false, color: '#ffffff'})\r\n  const [href, setHref] = useState('')\r\n\r\n  useEffect(() => {\r\n    const bgColorHex = randomHexColor()\r\n    const textColorHex = getContrast(bgColorHex)\r\n    setBgColor({...bgColor, color: `#${bgColorHex}`})\r\n    setFontTheme({...fontTheme, color: textColorHex})\r\n  }, [])\r\n  const handleSizeChange = ({target}) => {\r\n    setSizeValue(prev => ({...prev, [target.name]: target.value}))\r\n  }  \r\n  const handleTextChange = ({target}) => {\r\n    setText(target.value)\r\n  }\r\n  const handleFontTheme = ({target}) => {\r\n    setFontTheme(prev => ({...prev, [target.name]: target.value}))\r\n  }\r\n  const handleBgColorOpen = () => {\r\n    setBgColor({...bgColor, displayColorPicker: !bgColor.displayColorPicker})\r\n  }\r\n  const handleBgColorClose = () => {\r\n    setBgColor({...bgColor, displayColorPicker: false})\r\n  }\r\n  const handleBgColor = (color) => {\r\n    setBgColor({...bgColor, color: color.hex})\r\n  }\r\n  const handleTextColorOpen = () => {\r\n    setTextColor({...textColor, displayColorPicker: !textColor.displayColorPicker})\r\n  }\r\n  const handleTextColorClose = () => {\r\n    setTextColor({...textColor, displayColorPicker: false})\r\n  }\r\n  const handleTextColor = (color) => {\r\n    setTextColor({...textColor, color: color.hex})\r\n    setFontTheme({...fontTheme, color: color.hex})\r\n  }\r\n  const handleUpdatePreview = (href) => setHref(href)\r\n\r\n  const placeholder = 'typing text here :)'\r\n  return <>\r\n    <Header></Header>\r\n    <section style={{textAlign: 'center'}}>\r\n      <StyledBannerSizeField>\r\n        <SizeField sizeValue={sizeValue} onChange={handleSizeChange} />\r\n      </StyledBannerSizeField>\r\n      <StyledBannerPreview>\r\n        <Preview\r\n          width={sizeValue.width}\r\n          height={sizeValue.height}\r\n          backgroundColor={bgColor.color}\r\n          text={text}\r\n          fontTheme={fontTheme} \r\n          href={href}\r\n          updatePreview={handleUpdatePreview}\r\n        />\r\n      </StyledBannerPreview>\r\n      <StyledBannerTextField>\r\n        <TextField \r\n          placeholder={placeholder}\r\n          onChange={handleTextChange} \r\n          onFocus={({target}) => target.placeholder = ''} \r\n          onBlur={({target}) => (target.value === '') && (target.placeholder = placeholder)} \r\n        />\r\n      </StyledBannerTextField>\r\n      <StyledFontEditor>\r\n        <FontEditor onChange={handleFontTheme} />\r\n      </StyledFontEditor>\r\n      <StyledColorEditor>\r\n        <ColorPicker \r\n          onOpen={handleBgColorOpen}\r\n          onClose={handleBgColorClose}\r\n          color={bgColor.color}\r\n          icon={faFillDrip}\r\n          displayColorPicker={bgColor.displayColorPicker}\r\n          colorPicker={<ChromePicker color={bgColor.color} onChange={handleBgColor} disableAlpha={true} />}\r\n        />\r\n        <ColorPicker \r\n          onOpen={handleTextColorOpen}\r\n          onClose={handleTextColorClose}\r\n          color={textColor.color}\r\n          icon={faFont}\r\n          displayColorPicker={textColor.displayColorPicker}\r\n          colorPicker={<ChromePicker color={textColor.color} onChange={handleTextColor} disableAlpha={true} />}\r\n        />\r\n      </StyledColorEditor>\r\n      <StyledBannerDownLoad>\r\n        <DownloadButton href={href} />\r\n      </StyledBannerDownLoad>\r\n    </section>\r\n  </>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}