{"version":3,"sources":["components/Header.js","components/Input.js","components/SizeField.js","utils.js","components/PreviewCanvas.js","canvas.js","components/TextField.js","components/Select.js","components/FontEditor.js","components/ColorPicker.js","components/ImageUpload.js","components/DownloadButton.js","App.js","serviceWorker.js","index.js"],"names":["StyledHeader","styled","header","Header","DefaultInput","input","props","big","Input","StyledFormControl","div","BannerSizeField","sizeValue","onChange","width","height","name","placeholder","value","fontFamilyList","fontSizeList","fileTypes","validFileType","file","includes","type","canvasInstance","canvas","size","text","fontFamily","fontSize","fontColor","backagroundColor","backgroundImage","Object","assign","this","src","Promise","res","img","Image","onload","loadImage","catch","console","error","image","ctx","getContext","drawImage","fillStyle","fillRect","family","color","x","y","font","textAlign","textBaseline","fillText","canvasTextDraw","PreviewCanvas","fontTheme","background","href","updatePreview","canvasRef","useRef","useEffect","a","update","current","render","url","toDataURL","ref","StyledInput","TextField","onFocus","onBlur","DefaultSelect","select","Select","StyledSelector","FontEditor","map","index","key","StyledSvg","span","StyledColorPickerWrap","StyledColorPicker","ColorSwatch","StyledColorPopover","StyledColorCover","ColorPicker","onOpen","onClose","icon","isDisplay","onClick","hex","disableAlpha","StyledFileInput","ImageUpload","updateImage","htmlFor","faImage","id","accept","curFiles","files","length","URL","createObjectURL","StyledButton","DownloadButton","download","faDownload","StyledSectionWrapper","StyledBannerSizeField","StyledBannerPreview","StyledBannerTextField","StyledFontEditor","StyledColorEditor","StyledBannerDownLoad","App","useState","setText","setSize","setFontTheme","setBackground","setHref","colorPicker","setColorPicker","hexColor","backgroundColorHex","Math","floor","random","toString","textColorHex","parseInt","substring","prev","handleColorPickerOpen","handleColorPickerClose","handleColorPickerChange","style","target","SizeField","faFillDrip","faFont","Boolean","window","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","message"],"mappings":"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","file":"static/js/main.e0ba6f52.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledHeader = styled.header`\r\n  width: 100%;\r\n  padding: 20px;\r\n  display: flex;\r\n  align-items: center;\r\n  background-color: rgba(0,0,0,0.45);\r\n  color: #f8f8f8;\r\n  margin-bottom: 40px;\r\n  h1 {\r\n    font-size: 18px;\r\n    font-weight: normal;\r\n  }\r\n  span {\r\n    margin-left: auto;\r\n  }\r\n`\r\n\r\nconst Header = () => {\r\n  return  <StyledHeader>\r\n    <h1>Banner</h1>\r\n    <span>By JIHYE</span>\r\n  </StyledHeader>\r\n}\r\n\r\nexport default Header","import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst DefaultInput = styled.input`\r\n  display: inline-block;\r\n  padding: ${props => props.big ? '10px 20px' : '10px 12px'};\r\n  height: ${props => props.big ? '55px' : '40px'};\r\n  border: none;\r\n  background-color: #fff;\r\n  font-size: ${props => props.big ? '18px' : '14px'};\r\n  font-family: 'Arial', sans-serif;\r\n`\r\n\r\nconst Input = props => <DefaultInput {...props} />\r\n\r\nexport default Input","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport Input from './Input'\r\n\r\nconst StyledFormControl = styled.div`\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n  span {\r\n    width: 100px;\r\n    display: inline-block;\r\n    padding: 11px 15px;\r\n    height: 40px;\r\n    font-size: 15px;\r\n    color: #333;\r\n    vertical-align: middle;\r\n    background-color: #eee;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n  input {\r\n    width: 205px;\r\n    vertical-align: middle;\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n`\r\n\r\nconst BannerSizeField = ({sizeValue, onChange}) => {\r\n  const {width, height} = sizeValue\r\n  return <>\r\n    <StyledFormControl>\r\n      <span>width</span>\r\n      <Input name=\"width\" placeholder=\"width\" value={width} onChange={onChange} />\r\n    </StyledFormControl>\r\n    <StyledFormControl>\r\n      <span>height</span>\r\n      <Input name=\"height\" placeholder=\"height\" value={height} onChange={onChange} />\r\n    </StyledFormControl>\r\n  </>\r\n}\r\n\r\nexport default BannerSizeField","\r\nexport const canvasTextDraw = (canvas, text, family, size, color) => {\r\n  const ctx = canvas.getContext('2d')\r\n  const x = canvas.width/2\r\n  const y = canvas.height/2\r\n  ctx.font = `${size}px ${family}`\r\n  ctx.textAlign = 'center'\r\n  ctx.textBaseline = 'middle'\r\n  ctx.fillStyle = color\r\n  ctx.fillText(text, x, y)\r\n}\r\n\r\nexport const canvasImageDraw = (canvas, img) => {\r\n  const ctx = canvas.getContext('2d')\r\n  ctx.drawImage(img, 0, 0, canvas.width, canvas.height)\r\n  ctx.globalAlpha = 0.4;\r\n} \r\n\r\nexport const fontFamilyList = [\r\n  'Arial, sans-serif',\r\n  'Courier, serif',\r\n  'Times New Roman, serif',\r\n  'Impact, sans-serif',\r\n  '궁서, serif',\r\n  '돋움, sans-serif',\r\n  '바탕, sans-serif'\r\n]\r\nexport const fontSizeList = [20, 30, 40, 50, 60, 70, 80, 90, 100, 120]\r\n\r\nexport const randomHexColor = () => `${Math.floor(Math.random() * 16777215).toString(16)}` // 16777215 === ffffff\r\n\r\nexport const getContrast = (hexColor) => {\r\n  const r = parseInt(hexColor.substring(0, 2), 16)\r\n  const g = parseInt(hexColor.substring(2, 2), 16)\r\n  const b = parseInt(hexColor.substring(4, 2), 16)\r\n  const yiq = (r * 299 + g * 587 + b * 114) / 1000\r\n  return yiq >= 220 ? '#000000' : '#ffffff'\r\n}\r\n\r\nexport const fileTypes = [\r\n  'image/jpeg',\r\n  'image/png',\r\n  'image/jpg',\r\n]\r\n\r\nexport const validFileType = file => fileTypes.includes(file.type)\r\n\r\n","import React, { useRef, useEffect } from 'react'\r\nimport { Canvas } from '../canvas'\r\n\r\nconst canvasInstance = new Canvas()\r\n\r\nconst PreviewCanvas = ({size, text, fontTheme, background, href, updatePreview}) => {\r\n  const canvasRef = useRef(null)\r\n  useEffect(() => {\r\n    (async () => {\r\n      await canvasInstance.update({\r\n        canvas: canvasRef.current,\r\n        size: size,\r\n        text: text,\r\n        fontFamily: fontTheme.family,\r\n        fontSize: fontTheme.size,\r\n        fontColor: fontTheme.color,\r\n        backagroundColor: background.color,\r\n        backgroundImage: background.image\r\n      })     \r\n      canvasInstance.render() \r\n\r\n      const url = canvasRef.current.toDataURL();\r\n      href !== url && updatePreview(url)\r\n    })()\r\n  }, [size, text, fontTheme, background, href, updatePreview])\r\n\r\n  return <canvas ref={canvasRef} width={size.width} height={size.height}></canvas>\r\n}\r\n\r\nexport default PreviewCanvas","import {canvasTextDraw} from './utils'\r\nexport class Canvas {\r\n  constructor({\r\n    canvas,\r\n    size, \r\n    text,\r\n    fontFamily,\r\n    fontSize,\r\n    fontColor,\r\n    backagroundColor = '#000000',\r\n    backgroundImage = '',\r\n  } = {}){\r\n    Object.assign(this, {\r\n      canvas,\r\n      size,\r\n      text,\r\n      fontFamily,\r\n      fontSize,\r\n      fontColor,\r\n      backagroundColor,\r\n      backgroundImage,\r\n    }) \r\n  }\r\n\r\n  loadImage(src){\r\n    return new Promise((res) => {\r\n      const img = new Image()\r\n      img.onload = () => res(img)\r\n      img.src = src\r\n    })\r\n  }\r\n\r\n  async update({\r\n    canvas,\r\n    size, \r\n    text,\r\n    fontFamily,\r\n    fontSize,\r\n    fontColor,\r\n    backagroundColor,\r\n    backgroundImage\r\n  }){\r\n    if(this.backgroundImage !== backgroundImage) {\r\n      this.image = await this.loadImage(backgroundImage).catch(console.error)\r\n    }\r\n    Object.assign(this, {canvas, size, text, fontFamily, fontSize, fontColor, backagroundColor, backgroundImage}) \r\n  }\r\n\r\n  render(){\r\n    const canvas = this.canvas\r\n    const ctx = canvas.getContext('2d')\r\n    if(this.image) ctx.drawImage(this.image, 0, 0, canvas.width, canvas.height)\r\n    else {\r\n      ctx.fillStyle = this.backagroundColor\r\n      ctx.fillRect(0, 0, canvas.width, canvas.height)\r\n    }\r\n    \r\n    canvasTextDraw(canvas, this.text, this.fontFamily, this.fontSize, this.fontColor)\r\n  }\r\n}","import React from 'react'\r\nimport Input from './Input'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledInput = styled(Input)`\r\n  width: 100%;\r\n  color: #eee;\r\n  background-color: rgba(0, 0, 0, 0.35);\r\n  box-shadow: 5px 5px 5px rgba(0, 0, 0, 0.55);\r\n  outline: none;\r\n  &::placeholder {\r\n    color: #eee;\r\n  }\r\n`\r\n\r\nconst TextField = ({onChange, onFocus, onBlur, placeholder}) => {\r\n  return <StyledInput big name=\"text\" onChange={onChange} onFocus={onFocus} onBlur={onBlur} placeholder={placeholder} />\r\n}\r\n\r\nexport default TextField","import React from 'react' \r\nimport styled from 'styled-components'\r\n\r\nconst DefaultSelect = styled.select`\r\n  display: inline-block;\r\n  padding: ${props => props.big ? '10px 23px' : '8px 15px'};\r\n  border: none;\r\n  background-color: #fff;\r\n  font-size: ${props => props.big ? '18px' : '14px'};\r\n  font-family: 'Arial', sans-serif;\r\n  border-radius: 3px;\r\n  color: #555;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n`\r\n\r\nconst Select = (props) => <DefaultSelect {...props} />\r\n\r\nexport default Select","import React from 'react'\r\nimport styled from 'styled-components';\r\nimport Select from './Select';\r\nimport { fontFamilyList, fontSizeList } from '../utils';\r\n\r\nconst StyledSelector = styled.div`\r\n  display: inline-block;\r\n  margin: 0 10px;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n  span {\r\n    width: 100px;\r\n    display: inline-block;\r\n    padding: 11px 15px;\r\n    height: 40px;\r\n    font-size: 15px;\r\n    color: #333;\r\n    vertical-align: middle;\r\n    background-color: #eee;\r\n    border-radius: 5px 0 0 5px;\r\n  }\r\n  select {\r\n    width: 205px;\r\n    vertical-align: middle;\r\n    height: 40px;\r\n    border-radius: 0 5px 5px 0;\r\n  }\r\n`\r\n\r\nconst FontEditor = ({onChange}) => {\r\n  return <>\r\n    <StyledSelector>\r\n      <span>font family</span>\r\n      <Select name=\"family\" onChange={onChange}>\r\n        {\r\n          fontFamilyList.map((family, index) => {\r\n            // const name = family.split(',')\r\n            return (<option value={family} key={`family-${index}`}>{family}</option>)\r\n          })\r\n        }\r\n      </Select>\r\n    </StyledSelector>\r\n    <StyledSelector>\r\n      <span>font size</span>\r\n      <Select name=\"size\" onChange={onChange}>\r\n        {\r\n          fontSizeList.map((size, index) => {\r\n            return (<option value={size} key={`size-${index}`}>{size}px</option>)\r\n          })\r\n        }\r\n      </Select>\r\n    </StyledSelector>\r\n  </>\r\n}\r\n\r\nexport default FontEditor","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { ChromePicker } from 'react-color'\r\n\r\nconst StyledSvg = styled.span`\r\n  display: block;\r\n  position: absolute;\r\n  left: 50%;\r\n  top: 50%;\r\n  transform: translate(-50%, -50%);\r\n  background-color: transparent;\r\n  color: #000000;\r\n`\r\nconst StyledColorPickerWrap= styled.div`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n  position: relative;\r\n`\r\nconst StyledColorPicker = styled.div`\r\n  padding: 3px;\r\n  background-color: #fff;\r\n  border-radius: 3px;\r\n  box-shadow: 5px 5px 10px rgba(0,0,0,0.35);\r\n  cursor: pointer;\r\n`\r\nconst ColorSwatch = styled.div`\r\n  width: 45px;\r\n  height: 45px;\r\n  border-radius: 3px;\r\n  background-color: ${props => props.color};\r\n`\r\nconst StyledColorPopover = styled.div`\r\n  position: absolute;\r\n  left: 0;\r\n  top: 70px;\r\n  z-index: 2;\r\n  margin-bottom: 50px;\r\n`\r\nconst StyledColorCover = styled.div`\r\n  position: fixed;\r\n  left: 0;\r\n  right: 0;\r\n  top: 0;\r\n  bottom: 0;\r\n`\r\n\r\nconst ColorPicker = ({onOpen, onClose, color, icon, isDisplay, onChange}) => {\r\n  return <StyledColorPickerWrap> \r\n    <StyledColorPicker onClick={onOpen}>\r\n      <ColorSwatch color={color}></ColorSwatch>\r\n      <StyledSvg><FontAwesomeIcon icon={icon} size=\"lg\" /></StyledSvg>\r\n    </StyledColorPicker>\r\n    {isDisplay ? <>\r\n      <StyledColorCover onClick={onClose}></StyledColorCover>\r\n      <StyledColorPopover>\r\n        <ChromePicker\r\n          color={color}\r\n          onChange={(color) => onChange(color.hex)} \r\n          disableAlpha={true} \r\n        />\r\n      </StyledColorPopover>\r\n    </> : null}\r\n  </StyledColorPickerWrap>\r\n}\r\n\r\nexport default ColorPicker\r\n\r\n","import React, { useRef } from 'react'\r\nimport styled from 'styled-components';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faImage } from '@fortawesome/free-solid-svg-icons'\r\nimport { validFileType } from '../utils';\r\n\r\nconst StyledFileInput = styled.div`\r\n  display: inline-block;\r\n  vertical-align: middle;\r\n  position: relative;\r\n  input {\r\n    display: none;\r\n  }\r\n  label {\r\n    display: block;\r\n    width: 51px;\r\n    height: 51px;\r\n    background-color: rgba(0,0,0,0.35);\r\n    border-radius: 3px;\r\n    box-shadow: 5px 5px 10px rgba(0,0,0,0.35);\r\n    text-align: center;\r\n    border: 3px solid #fff;\r\n    color: #fff;\r\n    line-height: 48px;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst ImageUpload = ({updateImage}) => {\r\n  const input = useRef(null)\r\n  const onChange = () => {\r\n    const curFiles = input.current.files\r\n    if(curFiles.length === 0) return\r\n    for(const file of curFiles) {\r\n      if(validFileType(file)) {\r\n        const src = URL.createObjectURL(file)\r\n        typeof updateImage === 'function' && updateImage(src)\r\n      }\r\n    }\r\n  }\r\n  return <StyledFileInput>\r\n    <label htmlFor=\"image\"><FontAwesomeIcon icon={faImage} size=\"lg\" /></label>\r\n    <input\r\n      ref={input}\r\n      type=\"file\"\r\n      name=\"image\"\r\n      id=\"image\"\r\n      accept=\".png, .jpeg, .jpg\"\r\n      onChange={onChange} \r\n    />\r\n  </StyledFileInput>\r\n}\r\n\r\nexport default ImageUpload","import React from 'react'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faDownload } from '@fortawesome/free-solid-svg-icons'\r\nimport styled from 'styled-components'\r\n\r\nconst StyledButton = styled.a`\r\n  display: inline-block;\r\n  width: 150px;\r\n  height: 45px;\r\n  line-height: 45px;\r\n  text-align: center;\r\n  border-radius: 3px;\r\n  background-color: #1098ad;\r\n  font-size: 16px;\r\n  color: #fff;\r\n  cursor: pointer;\r\n  text-decoration: none;\r\n  box-shadow: 5px 5px 10px rgba(0, 0, 0, 0.35);\r\n`\r\n\r\nconst DownloadButton = ({href}) => {\r\n  return <StyledButton href={href} download=\"banner-image.png\">\r\n    <FontAwesomeIcon icon={faDownload} />  Download\r\n  </StyledButton>\r\n}\r\n\r\nexport default DownloadButton","import React, { useState, useEffect } from 'react';\r\nimport './App.css';\r\nimport styled from 'styled-components';\r\nimport Header from './components/Header';\r\nimport SizeField from './components/SizeField'\r\nimport PreviewCanvas from './components/PreviewCanvas';\r\nimport TextField from './components/TextField';\r\nimport FontEditor from './components/FontEditor';\r\nimport ColorPicker from './components/ColorPicker';\r\nimport ImageUpload from './components/ImageUpload';\r\nimport DownloadButton from './components/DownloadButton';\r\n\r\nimport { faFillDrip, faFont } from '@fortawesome/free-solid-svg-icons'\r\n\r\nimport { randomHexColor, getContrast } from './utils';\r\n\r\nconst StyledSectionWrapper = styled.div`\r\n  display:  flex;\r\n  align-items: flex-start;\r\n  justify-content: center;\r\n  flex-wrap: wrap;\r\n`\r\nconst StyledBannerSizeField = styled.div`\r\n  text-align: center;\r\n  margin: 20px 0;\r\n`\r\nconst StyledBannerPreview = styled.div`\r\n  margin-bottom: 20px;\r\n`\r\nconst StyledBannerTextField = styled.div`\r\n  width: 700px;\r\n  margin: 0 auto;\r\n`\r\nconst StyledFontEditor = styled.div`\r\n`\r\nconst StyledColorEditor = styled.div`\r\n  margin: 20px 0 35px;\r\n  > div {\r\n    margin: 0 10px;\r\n  }\r\n`\r\nconst StyledBannerDownLoad = styled.div`\r\n`\r\n\r\nconst App = () => {\r\n  const [text, setText] = useState('Sample Banner')\r\n  const [size, setSize] = useState({width: '700', height: '350'})\r\n  const [fontTheme, setFontTheme] = useState({family: 'Arial, sans-serif', size: '20', color: '#ffffff'})\r\n  const [background, setBackground] = useState({color: '#000000', image: ''})\r\n  const [href, setHref] = useState('')\r\n  const [colorPicker, setColorPicker] = useState({\r\n    background: {isDisplay: false, color: '#000000'},\r\n    text: {isDisplay: false, color: '#ffffff'}\r\n  })\r\n\r\n  useEffect(() => {\r\n    const backgroundColorHex = randomHexColor()\r\n    const textColorHex = getContrast(backgroundColorHex)\r\n    setBackground(prev => ({...prev, color: `#${backgroundColorHex}`}))\r\n    setFontTheme(prev => ({...prev, color: textColorHex}))\r\n    setColorPicker(prev => ({...prev, background: {...prev[background], color: `#${backgroundColorHex}`}}))\r\n  }, [])\r\n\r\n  const handleSizeChange = ({target}) => setSize(prev => ({...prev, [target.name]: target.value})) \r\n  const handleTextChange = ({target}) => setText(target.value)\r\n  const handleFontTheme = ({target}) => setFontTheme(prev => ({...prev, [target.name]: target.value}))\r\n  const handleUpdateImage = src => setBackground({...background, image: src})\r\n  \r\n  const handleColorPickerOpen = type => setColorPicker(prev => ({...prev, [type]: {...prev[type], isDisplay: true}}))\r\n  const handleColorPickerClose = type => setColorPicker(prev => ({...prev, [type]: {...prev[type], isDisplay: false}}))\r\n  const handleColorPickerChange = (type, color) => {\r\n    setColorPicker(prev => ({...prev, [type]: {...prev[type], color: color}}))\r\n    type === 'background' && setBackground({color: color, image: ''})\r\n    type === 'text' && setFontTheme({...fontTheme, color : color})\r\n  } \r\n  \r\n  const placeholder = 'typing text here :)'\r\n  return <>\r\n    <Header></Header>\r\n    <StyledSectionWrapper>\r\n      <section style={{textAlign: 'center'}}>\r\n        <StyledBannerPreview>\r\n          <PreviewCanvas \r\n            size={size}\r\n            text={text}\r\n            fontTheme={fontTheme}\r\n            background={background}\r\n            href={href}\r\n            updatePreview={(href) => setHref(href)}\r\n          />\r\n        </StyledBannerPreview>\r\n\r\n        <StyledBannerTextField>\r\n          <TextField \r\n            placeholder={placeholder}\r\n            onChange={handleTextChange} \r\n            onFocus={({target}) => target.placeholder = ''} \r\n            onBlur={({target}) => (target.value === '') && (target.placeholder = placeholder)} \r\n          />\r\n        </StyledBannerTextField>\r\n\r\n        <StyledBannerSizeField>\r\n          <SizeField sizeValue={size} onChange={handleSizeChange} />\r\n        </StyledBannerSizeField>\r\n\r\n        <StyledFontEditor>\r\n          <FontEditor onChange={handleFontTheme} />\r\n        </StyledFontEditor>\r\n\r\n        <StyledColorEditor>\r\n          <ColorPicker \r\n            icon={faFillDrip}\r\n            onOpen={() => handleColorPickerOpen('background')}\r\n            onClose={() => handleColorPickerClose('background')}\r\n            color={colorPicker.background.color}\r\n            isDisplay={colorPicker.background.isDisplay}\r\n            onChange={(color) => handleColorPickerChange('background', color)}\r\n          />\r\n          <ColorPicker \r\n            icon={faFont}\r\n            onOpen={() => handleColorPickerOpen('text')}\r\n            onClose={() => handleColorPickerClose('text')}\r\n            color={colorPicker.text.color}\r\n            isDisplay={colorPicker.text.isDisplay}\r\n            onChange={(color) => handleColorPickerChange('text', color)}\r\n          />\r\n          <ImageUpload updateImage={handleUpdateImage} />\r\n        </StyledColorEditor>\r\n\r\n        <StyledBannerDownLoad>\r\n          <DownloadButton href={href} />\r\n        </StyledBannerDownLoad>\r\n      </section>\r\n    </StyledSectionWrapper>\r\n  </>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}